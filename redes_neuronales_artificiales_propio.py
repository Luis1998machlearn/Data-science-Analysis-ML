# -*- coding: utf-8 -*-
"""redes neuronales artificiales Propio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-DigkBBvLn0KJyL4i_QPH36ZGHZNNeoj
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import io
dataset = pd.read_csv(io.BytesIO(uploaded['Churn_Modelling.csv']))
X = dataset.iloc[:, 3:13].values
y = dataset.iloc[:, 13].values

dataset

"""Pre procesado de datos

Codificar datos categóricos
"""

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer

labelencoder_X_1 = LabelEncoder() #trasnsformar la columna 1 en dummies
X[:, 1] = labelencoder_X_1.fit_transform(X[:, 1]) #ajustar y corregir automáticamente los valores que hay en columna 1
labelencoder_X_2 = LabelEncoder()
X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])
onehotencoder = ColumnTransformer(
    [('one_hot_encoder', OneHotEncoder(categories='auto'), [1])],   
    remainder='passthrough'                        
) #pasar los 1,2 y 3 hace columna dummies para columna 1
X = onehotencoder.fit_transform(X) #eliminar una columna dummie para no caer en la trampa de multicolinealidad
X = X[:, 1:]

X

"""Dividir en entrenamiento y testing"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""Escalado de variables (cuando hay variables que destacan del resto, son más grandes)"""

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

X_train

"""Contruir red neuronal"""

import keras
from keras.models import Sequential #inicializar paámetros de la red
from keras.layers import Dense #declarar y crear capas intermedias

"""Iniciar red"""

classifier = Sequential()

"""Capas de entrada y primera capa oculta"""

#11 capas de entrada que son las variables independientes
classifier.add(Dense(units = 6,kernel_initializer='uniform',activation='relu', input_dim = 11))

#añadir segunda capa oculta
classifier.add(Dense(units = 6,kernel_initializer='uniform',activation='relu'))

#capa de salida
classifier.add(Dense(units = 1,kernel_initializer='uniform',activation='sigmoid'))

"""Compilar la red"""

classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics= ['accuracy'])

"""Evaluar modelo y calcular predicciones"""

classifier.fit(X_train, y_train, batch_size=10,epochs= 100)# batch es de cuanto en cuanto corregir

"""Resultados Finales"""

y_pred = classifier.predict(X_test)
y_pred = (y_pred>0.5)

"""Matriz confusión"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

y_pred

cm

"""Precisión"""

(1516+195)/2000